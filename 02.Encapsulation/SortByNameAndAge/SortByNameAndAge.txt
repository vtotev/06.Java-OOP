Sort by Name and Age
---------------------------------------
Create a class Person, which should have private fields for:
•	firstName: String
•	lastName: String
•	age: int
•	toString() - override

You should be able to use the class like this:

Main.java
public static void main(String[] args) throws IOException {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(reader.readLine());

    List<Person> people = new ArrayList<>();

    for (int i = 0; i < n; i++) {
        String[] input = reader.readLine().split(" ");
        people.add(new Person(input[0], input[1], Integer.parseInt(input[2])));
    }

    Collections.sort(people, (firstPerson, secondPerson) -> {
        int sComp = firstPerson.getFirstName().compareTo(secondPerson.getFirstName());

        if (sComp != 0) {
            return sComp;
        } else { 
            return Integer.compare(firstPerson.getAge(), secondPerson.getAge()); 
        }
    });

    for (Person person : people) {
        System.out.println(person.toString());
    }
}


Examples

Input
---------------------------------------
5
Asen Ivanov 65
Boiko Borisov 57
Ventsislav Ivanov 27
Asen Harizanoov 44
Boiko Angelov 35

Output
---------------------------------------
Asen Harizanoov is 44 years old.
Asen Ivanov is 65 years old.
Boiko Angelov is 35 years old.
Boiko Borisov is 57 years old.
Ventsislav Ivanov is 27 years old.


Solution
---------------------------------------
Create a new class and ensure proper naming. Define the private fields:
 
Create getters and apply them access modifiers, which are as strictly as possible
 
Override toString() method:
 
